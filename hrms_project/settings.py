"""
Django settings for hrms_project project.

Generated by 'django-admin startproject' using Django 5.1.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""
import os
from pathlib import Path


#google recaptcha
RECAPTCHA_PUBLIC_KEY = '6Leh9VYrAAAAAHx03L847AT7KPXQKmhEHL3RYzzF'
RECAPTCHA_PRIVATE_KEY = '6Leh9VYrAAAAABJiXJD7AH6db5-ksN-mE7Pdfgdc'
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-0^uf$ncl^q&^-^%$gquf!84c&v%=%a1&j94pww++7g6dwd0z0('
#
# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True
# DEBUG = False

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static')
]

# ALLOWED_HOSTS = []
# ALLOWED_HOSTS = ["35.225.224.226", "127.0.0.1"]
ALLOWED_HOSTS = ["34.58.114.68","127.0.0.1",'localhost','*','34.29.104.90','employee.spectrasoln.com']

#added for domain
CSRF_TRUSTED_ORIGINS = [
    'https://employee.spectrasoln.com',
]


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    
    'employee_app',
    'admin_app'
    
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'hrms_project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'admin_app','templates'),os.path.join(BASE_DIR, 'employee_app','templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'hrms_project.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',  # or 'django.db.backends.mysql' for MySQL
        'NAME': 'postgres',
        'USER': 'postgres',
        'PASSWORD': 'Hrms@123',
        'HOST': '34.29.190.19',  # or 'localhost' if using Cloud SQL Proxy
        'PORT': '5432',  # PostgreSQL default port, or '3306' for MySQL
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/


#
# STATIC_URL = 'static/'

# Add the following to make Django aware of your static files directory

# STATICFILES_DIRS = [
#     BASE_DIR / "static",
# BASE_DIR / "employee_app/static",  # Path to employee app's static directory
#
# ]

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'



# media configuration

import os

# # MEDIA_URL and MEDIA_ROOT settings
# MEDIA_URL = '/media/'  # URL prefix for serving media files
# MEDIA_ROOT = os.path.join(BASE_DIR, 'media')  # Folder where media files are stored
#




# settings.py

AUTHENTICATION_BACKENDS = [
    'employee_app.backends.EmailBackend',  # Add your custom backend here
    'django.contrib.auth.backends.ModelBackend',  # Default backend (you can keep it as fallback)
]

DEFAULT_FROM_EMAIL='lms@spectrasoln.com'


# settings.py
import os

EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'mail.spectrasoln.com'  # Updated from 'smtp.spectrasoln.com'
EMAIL_PORT = 465  # Updated to use the SSL port as specified
EMAIL_USE_SSL = True  # Use SSL for secure email sending
EMAIL_HOST_USER = 'lms@spectrasoln.com'
EMAIL_HOST_PASSWORD = 'LMS@SpEctra'  # Make sure the password is set in your environment

# Ensure you set the SUPPORTMAIL_PASSWORD environment variable in your system

# EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'



# import os
#
# STATIC_URL = '/static/'
# STATICFILES_DIRS = [
#     os.path.join(BASE_DIR, 'static'),  # Ensure this exists
# ]
# STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')  # For collectstatic






#
# import os
#
# STATIC_URL = '/static/'
#
# # Collect static files from these directories
# STATICFILES_DIRS = [
#     os.path.join(BASE_DIR, 'admin_app/static'),
#     os.path.join(BASE_DIR, 'employee_app/static'),
# ]
#
# # This is where collectstatic will copy all static files
# STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')




#
# import os
# from pathlib import Path
#
# BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
#
# STATIC_URL = '/static/'
#
# # Centralized static folder (Remove per-app static directories)
# STATICFILES_DIRS = [
#     os.path.join(BASE_DIR, 'static'),  # Use only the main static folder
# ]
#
# # Collectstatic will copy all static files here (used in production)
# STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
#




import os
from pathlib import Path

# Base directory of the project
BASE_DIR = Path(__file__).resolve().parent.parent

# # URL for serving static files
# STATIC_URL = '/static/'
#
# # Static files directory (for development)
# STATICFILES_DIRS = [
#     BASE_DIR / "static",  # Ensure this points to the correct folder
# ]
#
# # Directory where 'collectstatic' will collect static files (for production)
# STATIC_ROOT = BASE_DIR / "staticfiles"




#
# STATIC_URL = '/static/'
#
# # STATIC_ROOT = os.path.join(BASE_DIR, 'static')
#
# STATICFILES_DIRS = [
#
#     os.path.join(BASE_DIR, 'static'),
#
# ]
#
# STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
#

# # Optional: Ensure static files are correctly found in production
# STATICFILES_FINDERS = [
#     "django.contrib.staticfiles.finders.FileSystemFinder",
#     "django.contrib.staticfiles.finders.AppDirectoriesFinder",
# ]










import os
from dotenv import load_dotenv

# Load environment variables from .env file
load_dotenv()

# Retrieve admin credentials
ADMIN_USERNAME = os.getenv('ADMIN_USERNAME')
ADMIN_EMAIL = os.getenv('ADMIN_EMAIL')
ADMIN_PASSWORD = os.getenv('ADMIN_PASSWORD')
